// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package consul

import (
	"github.com/hashicorp/consul/api"
	"sync"
)

// Ensure, that servicerMock does implement servicer.
// If this is not the case, regenerate this file with moq.
var _ servicer = &servicerMock{}

// servicerMock is a mock implementation of servicer.
//
//	func TestSomethingThatUsesservicer(t *testing.T) {
//
//		// make and configure a mocked servicer
//		mockedservicer := &servicerMock{
//			ServiceFunc: func(s1 string, s2 string, b bool, queryOptions *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
//				panic("mock out the Service method")
//			},
//		}
//
//		// use mockedservicer in code that requires servicer
//		// and then make assertions.
//
//	}
type servicerMock struct {
	// ServiceFunc mocks the Service method.
	ServiceFunc func(s1 string, s2 string, b bool, queryOptions *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error)

	// calls tracks calls to the methods.
	calls struct {
		// Service holds details about calls to the Service method.
		Service []struct {
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// B is the b argument value.
			B bool
			// QueryOptions is the queryOptions argument value.
			QueryOptions *api.QueryOptions
		}
	}
	lockService sync.RWMutex
}

// Service calls ServiceFunc.
func (mock *servicerMock) Service(s1 string, s2 string, b bool, queryOptions *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
	if mock.ServiceFunc == nil {
		panic("servicerMock.ServiceFunc: method is nil but servicer.Service was just called")
	}
	callInfo := struct {
		S1           string
		S2           string
		B            bool
		QueryOptions *api.QueryOptions
	}{
		S1:           s1,
		S2:           s2,
		B:            b,
		QueryOptions: queryOptions,
	}
	mock.lockService.Lock()
	mock.calls.Service = append(mock.calls.Service, callInfo)
	mock.lockService.Unlock()
	return mock.ServiceFunc(s1, s2, b, queryOptions)
}

// ServiceCalls gets all the calls that were made to Service.
// Check the length with:
//
//	len(mockedservicer.ServiceCalls())
func (mock *servicerMock) ServiceCalls() []struct {
	S1           string
	S2           string
	B            bool
	QueryOptions *api.QueryOptions
} {
	var calls []struct {
		S1           string
		S2           string
		B            bool
		QueryOptions *api.QueryOptions
	}
	mock.lockService.RLock()
	calls = mock.calls.Service
	mock.lockService.RUnlock()
	return calls
}
